{
  "name": "card",
  "dependencies": [],
  "registryDependencies": [],
  "file": {
    "name": "card.tsx",
    "content": "import * as React from 'react'\n\nimport { type Assign, ark } from '@ark-ui/react'\n\n\n\nimport { cn } from '<%= aliases.utilities %>/cn'\n\nimport { recursiveClone } from '<%= aliases.utilities %>/recursive-clone'\n\nimport { type VariantProps, tv } from '<%= aliases.utilities %>/tv'\n\n//---------------------------------\n// Constants\n//---------------------------------\n\nconst CARD_PARTS = {\n  Root: 'Card.Root',\n  Header: 'Card.Header',\n  Title: 'Card.Title',\n  Body: 'Card.Body',\n  Description: 'Card.Description',\n  Footer: 'Card.Footer',\n}\n\n//---------------------------------\n// Variants\n//---------------------------------\n\nconst cardVariantsSlots = tv({\n  slots: {\n    root: 'h-fit rounded-xl border bg-surface-2 shadow-black/8 shadow-xs dark:shadow-white/8',\n    header: 'flex flex-col gap-2.5',\n    title: 'mb-2 line-clamp-2 text-pretty font-bold font-sans text-fg-1',\n    description: 'text-pretty font-normal font-sans text-fg-1',\n    footer: 'flex items-center justify-end gap-3',\n    body: null,\n  },\n  variants: {\n    size: {\n      sm: {\n        root: 'max-w-[35rem] space-y-4 p-4',\n        title: 'text-lg/7',\n      },\n      md: {\n        root: 'max-w-[45rem] space-y-6 p-6',\n      },\n      lg: {\n        root: 'max-w-[60rem] space-y-8 p-8',\n        description: 'text-lg/7',\n        header: 'gap-3',\n      },\n    },\n  },\n  compoundVariants: [\n    {\n      size: ['sm', 'md'],\n      class: {\n        description: 'text-base',\n      },\n    },\n    {\n      size: ['md', 'lg'],\n      class: {\n        title: 'text-xl/8',\n      },\n    },\n  ],\n  defaultVariants: {\n    size: 'md',\n  },\n})\n\nconst { root, header, body, title, description, footer } = cardVariantsSlots()\n\n//---------------------------------\n// Types\n//---------------------------------\n\ntype CardSharedProps = VariantProps<typeof cardVariantsSlots>\n\ntype CardProps = Assign<React.ComponentPropsWithRef<'div'>, CardSharedProps>\n\n//---------------------------------\n// Root\n//---------------------------------\n\nfunction Root({ className, children, size, ...props }: CardProps) {\n  const keyPrefix = React.useId()\n\n  const extendedChildrenWithInjectedProps = recursiveClone(children, {\n    inject: {\n      size,\n    },\n    match: [CARD_PARTS.Title, CARD_PARTS.Description],\n    keyPrefix,\n  })\n\n  return (\n    <div\n      {...props}\n      className={cn(\n        root({\n          className,\n          size,\n        }),\n      )}\n      data-scope=\"card\"\n      data-part=\"root\"\n    >\n      {extendedChildrenWithInjectedProps}\n    </div>\n  )\n}\n\nRoot.displayName = CARD_PARTS.Root\n\n//---------------------------------\n// Header\n//---------------------------------\n\nfunction Header({\n  className,\n  ...props\n}: React.ComponentPropsWithRef<'header'>) {\n  return (\n    <header\n      {...props}\n      className={cn(\n        header({\n          className,\n        }),\n      )}\n      data-scope=\"card\"\n      data-part=\"header\"\n    />\n  )\n}\n\nHeader.displayName = CARD_PARTS.Header\n\n//---------------------------------\n// Body\n//---------------------------------\n\nfunction Body({ className, ...props }: React.ComponentPropsWithRef<'main'>) {\n  return (\n    <main\n      {...props}\n      className={cn(\n        body({\n          className,\n        }),\n      )}\n      data-scope=\"card\"\n      data-part=\"body\"\n    />\n  )\n}\n\nBody.displayName = CARD_PARTS.Body\n\n//---------------------------------\n// Title\n//---------------------------------\n\nfunction Title({\n  className,\n  size,\n  id,\n  ...props\n}: Assign<React.CustomComponentPropsWithRef<typeof ark.h3>, CardSharedProps>) {\n  return (\n    <ark.h3\n      {...props}\n      className={cn(\n        title({\n          className,\n          size,\n        }),\n      )}\n      data-scope=\"card\"\n      data-part=\"title\"\n    />\n  )\n}\n\nTitle.displayName = CARD_PARTS.Title\n\n//---------------------------------\n// Description\n//---------------------------------\n\nfunction Description({\n  className,\n  size,\n  id,\n  ...props\n}: Assign<React.CustomComponentPropsWithRef<typeof ark.p>, CardSharedProps>) {\n  return (\n    <ark.p\n      {...props}\n      className={cn(\n        description({\n          className,\n          size,\n        }),\n      )}\n      data-scope=\"card\"\n      data-part=\"description\"\n    />\n  )\n}\n\nDescription.displayName = CARD_PARTS.Description\n\n//---------------------------------\n// Footer\n//---------------------------------\n\nfunction Footer({\n  className,\n  size,\n  ...props\n}: Assign<React.ComponentPropsWithRef<'footer'>, CardSharedProps>) {\n  return (\n    <footer\n      {...props}\n      className={cn(\n        footer({\n          className,\n          size,\n        }),\n      )}\n      data-scope=\"card\"\n      data-part=\"footer\"\n    />\n  )\n}\n\nFooter.displayName = CARD_PARTS.Footer\n\n//---------------------------------\n// Exports\n//---------------------------------\n\nexport const Card = {\n  Root,\n  Header,\n  Title,\n  Body,\n  Description,\n  Footer,\n}\nexport type { CardProps }\n"
  }
}