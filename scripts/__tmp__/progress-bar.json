{
  "name": "progress-bar",
  "dependencies": [
    "@number-flow/react"
  ],
  "registryDependencies": [],
  "file": {
    "name": "progress-bar.tsx",
    "content": "import { useId } from 'react'\n\nimport type { Assign } from '@ark-ui/react'\nimport {\n  Progress as ArkProgressBar,\n  useProgress,\n  useProgressContext,\n} from '@ark-ui/react/progress'\nimport type * as ArkProgressBarDefs from '@ark-ui/react/progress'\n\nimport NumberFlow from '@number-flow/react'\n\n\n\nimport { cn } from '<%= aliases.utilities %>/cn'\n\nimport { recursiveClone } from '<%= aliases.utilities %>/recursive-clone'\n\nimport { type VariantProps, tv } from '<%= aliases.utilities %>/tv'\n\ntype ProgressBarSharedProps = VariantProps<typeof progressBarVariants>\n\ntype ProgressBarProps = Assign<\n  ArkProgressBarDefs.ProgressRootProps,\n  ProgressBarSharedProps\n>\n\nconst progressBarDisplayNames = {\n  root: 'ProgressBar',\n  label: 'ProgressBarLabel',\n  valueText: 'ProgressBarValueText',\n  track: 'ProgressBarTrack',\n} as const\n\nconst progressBarVariants = tv({\n  slots: {\n    root: 'isolate flex min-w-96 items-center',\n    valueText: 'font-medium font-sans text-fg-1 tabular-nums',\n    track: 'grow overflow-hidden rounded-xs bg-fill-2',\n  },\n  variants: {\n    size: {\n      sm: {\n        valueText: 'text-xs/4.5',\n        track: 'h-1',\n      },\n      md: {\n        valueText: 'text-sm/5.5',\n        track: 'h-2',\n      },\n      lg: {\n        root: 'gap-2.5',\n        valueText: 'text-base',\n        track: 'h-3',\n      },\n    },\n  },\n  compoundVariants: [\n    {\n      size: ['sm', 'md'],\n      class: {\n        root: 'gap-2',\n      },\n    },\n  ],\n  defaultVariants: {\n    size: 'md',\n  },\n})\n\nconst { root, valueText, track } = progressBarVariants()\n\n// ProgressBarProvider ↴\n\nfunction ProgressBarProvider({\n  children,\n  className,\n  size,\n  ...props\n}: Assign<\n  ArkProgressBarDefs.ProgressRootProviderProps,\n  ProgressBarSharedProps\n>) {\n  const uniqueId = useId()\n\n  const extendedChildrenWithInjectedProps =\n    recursiveClone<ProgressBarSharedProps>(children, {\n      inject: {\n        size,\n      },\n      match: [\n        progressBarDisplayNames.label,\n        progressBarDisplayNames.valueText,\n        progressBarDisplayNames.track,\n      ],\n      keyPrefix: uniqueId,\n    })\n\n  return (\n    <ArkProgressBar.RootProvider\n      {...props}\n      className={cn(\n        root({\n          className,\n        }),\n      )}\n    >\n      {extendedChildrenWithInjectedProps}\n    </ArkProgressBar.RootProvider>\n  )\n}\n\n// ProgressBar ↴\n\nfunction ProgressBar({\n  children,\n  className,\n  size,\n  ...props\n}: ProgressBarProps) {\n  const uniqueId = useId()\n\n  const extendedChildrenWithInjectedProps =\n    recursiveClone<ProgressBarSharedProps>(children, {\n      inject: {\n        size,\n      },\n      match: [\n        progressBarDisplayNames.label,\n        progressBarDisplayNames.valueText,\n        progressBarDisplayNames.track,\n      ],\n      keyPrefix: uniqueId,\n    })\n\n  return (\n    <ArkProgressBar.Root\n      {...props}\n      className={cn(\n        root({\n          className,\n          size,\n        }),\n      )}\n    >\n      {extendedChildrenWithInjectedProps}\n    </ArkProgressBar.Root>\n  )\n}\n\n// ProgressBarValueText ↴\n\nfunction ProgressBarValueText({\n  className,\n  size,\n  ...props\n}: Assign<ArkProgressBarDefs.ProgressValueTextProps, ProgressBarSharedProps>) {\n  const progress = useProgressContext()\n  const percentage = progress.value! / 100\n\n  return (\n    <ArkProgressBar.ValueText\n      {...props}\n      className={cn(\n        valueText({\n          className,\n          size,\n        }),\n      )}\n      asChild\n    >\n      <NumberFlow\n        value={percentage}\n        format={{\n          style: 'percent',\n          notation: 'standard',\n          maximumFractionDigits: 2,\n        }}\n        isolate\n      />\n    </ArkProgressBar.ValueText>\n  )\n}\n\nProgressBarValueText.displayName = progressBarDisplayNames.valueText\n\n// ProgressBarTrack ↴\n\nfunction ProgressBarTrack({\n  className,\n  size,\n  ...props\n}: Assign<ArkProgressBarDefs.ProgressTrackProps, ProgressBarSharedProps>) {\n  return (\n    <ArkProgressBar.Track\n      {...props}\n      className={cn(\n        track({\n          size,\n        }),\n      )}\n    >\n      <ArkProgressBar.Range\n        className={cn('h-full bg-brand transition-[width] ease-in-out-quad')}\n      />\n    </ArkProgressBar.Track>\n  )\n}\n\nProgressBarTrack.displayName = progressBarDisplayNames.track\n\n// ProgressBarLabel ↴\n\nconst ProgressBarLabel = ArkProgressBar.Label\nProgressBarLabel.displayName = progressBarDisplayNames.label\n\nexport {\n  ProgressBarProvider,\n  ProgressBar,\n  ProgressBarValueText,\n  ProgressBarTrack,\n  useProgress,\n}\nexport type { ProgressBarProps }\n"
  }
}