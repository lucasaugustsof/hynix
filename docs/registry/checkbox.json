{
  "name": "checkbox",
  "dependencies": [],
  "registryDependencies": [
    "label"
  ],
  "file": {
    "name": "checkbox.tsx",
    "content": "import * as React from 'react'\n\nimport type { Assign } from '@ark-ui/react'\nimport {\n  Checkbox as ArkCheckbox,\n  useCheckbox,\n  useCheckboxContext,\n} from '@ark-ui/react/checkbox'\n\n\n\nimport { cn } from '<%= aliases.utilities %>/cn'\n\nimport { recursiveClone } from '<%= aliases.utilities %>/recursive-clone'\n\nimport { type VariantProps, tv } from '<%= aliases.utilities %>/tv'\n\nimport { motion } from 'motion/react'\n\n\n\nimport { Label as LabelComp, type LabelProps } from '<%= aliases.components %>/label'\n\n//---------------------------------\n// Constants\n//---------------------------------\n\nconst CHECKBOX_PARTS = {\n  Root: 'Checkbox.Root',\n  Control: 'Checkbox.Control',\n  Provider: 'Checkbox.Provider',\n  Group: 'Checkbox.Group',\n  Label: 'Checkbox.Label',\n}\n\n//---------------------------------\n// Variants\n//---------------------------------\n\nconst checkboxVariantsSlots = tv({\n  slots: {\n    root: 'group inline-flex items-center gap-3 outline-hidden',\n    control: [\n      'relative inset-ring-[1.5px] inset-ring-border inline-block cursor-pointer overflow-hidden bg-fill-1 shadow-black/4 shadow-xs dark:shadow-white/4',\n      'group-has-disabled:inset-ring-0 group-has-disabled:cursor-not-allowed group-has-disabled:bg-disabled group-has-disabled:shadow-none',\n    ],\n    indicator: [\n      'flex size-full items-center justify-center bg-brand transition-colors duration-200 ease-out',\n      // hover\n      'hover:bg-brand/90',\n    ],\n  },\n  variants: {\n    size: {\n      sm: {\n        control: 'size-5.5 rounded-lg',\n        indicator: '[&_svg]:size-4',\n      },\n      md: {\n        control: 'size-6 rounded-[calc(var(--radius-lg)_+_var(--radius-xs))]',\n        indicator: '[&_svg]:size-5',\n      },\n      lg: {\n        root: 'gap-4',\n        control: 'size-8 rounded-xl',\n        indicator: '[&_svg]:size-6',\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n})\n\nconst { root, control, indicator } = checkboxVariantsSlots()\n\n//---------------------------------\n// Types\n//---------------------------------\n\ntype CheckboxSharedProps = VariantProps<typeof checkboxVariantsSlots>\n\ntype CheckboxProps = Assign<\n  React.CustomComponentPropsWithRef<typeof ArkCheckbox.Root>,\n  CheckboxSharedProps\n>\n\n//---------------------------------\n// Root\n//---------------------------------\n\nfunction Root({ className, children, size, ...props }: CheckboxProps) {\n  const keyPrefix = React.useId()\n\n  const extendedChildrenWithInjectedProps = recursiveClone(children, {\n    inject: {\n      size,\n    },\n    match: [CHECKBOX_PARTS.Control, CHECKBOX_PARTS.Label],\n    keyPrefix,\n  })\n\n  return (\n    <ArkCheckbox.Root\n      {...props}\n      className={root({\n        className,\n        size,\n      })}\n    >\n      {extendedChildrenWithInjectedProps}\n      <ArkCheckbox.HiddenInput />\n    </ArkCheckbox.Root>\n  )\n}\n\nRoot.displayName = CHECKBOX_PARTS.Root\n\n//---------------------------------\n// Control\n//---------------------------------\n\nfunction CheckIcon({\n  type,\n}: {\n  type: 'check' | 'indeterminate'\n}) {\n  const CHECK_PATH = 'M5 13 L10 18 L20 6'\n  const INDETERMINATE_PATH = 'M6 12 H18'\n\n  return (\n    <svg\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      className={cn('shrink-0 stroke-4 stroke-fg-2')}\n    >\n      <title>Check</title>\n\n      <motion.path\n        d={type === 'check' ? CHECK_PATH : INDETERMINATE_PATH}\n        initial={{\n          pathLength: 0,\n        }}\n        animate={{\n          pathLength: 1,\n        }}\n        transition={{\n          duration: 0.3,\n          ease: [0.645, 0.045, 0.355, 1],\n        }}\n      />\n    </svg>\n  )\n}\n\nfunction Control({\n  size,\n  ...props\n}: Assign<\n  React.CustomComponentPropsWithRef<typeof ArkCheckbox.Control>,\n  CheckboxSharedProps\n>) {\n  const { checkedState, indeterminate: isIndeterminate } = useCheckboxContext()\n\n  return (\n    <ArkCheckbox.Control\n      {...props}\n      className={cn(\n        control({\n          size,\n        }),\n      )}\n      data-focusable\n    >\n      <ArkCheckbox.Indicator\n        className=\"absolute inset-0\"\n        indeterminate={isIndeterminate}\n      >\n        <div\n          className={cn(\n            indicator({\n              size,\n            }),\n          )}\n        >\n          {isIndeterminate ? (\n            <CheckIcon type=\"indeterminate\" />\n          ) : (\n            checkedState && <CheckIcon type=\"check\" />\n          )}\n        </div>\n      </ArkCheckbox.Indicator>\n    </ArkCheckbox.Control>\n  )\n}\n\nControl.displayName = CHECKBOX_PARTS.Control\n\n//---------------------------------\n// CheckboxProvider\n//---------------------------------\n\nconst Provider = ArkCheckbox.RootProvider\nProvider.displayName = CHECKBOX_PARTS.Provider\n\n//---------------------------------\n// CheckboxGroup\n//---------------------------------\n\nconst Group = ArkCheckbox.Group\nGroup.displayName = CHECKBOX_PARTS.Group\n\n//---------------------------------\n// CheckboxLabel\n//---------------------------------\n\nfunction Label(props: LabelProps) {\n  return (\n    <ArkCheckbox.Label asChild>\n      <LabelComp {...props} />\n    </ArkCheckbox.Label>\n  )\n}\n\nLabel.displayName = CHECKBOX_PARTS.Label\n\n//---------------------------------\n// Exports\n//---------------------------------\n\nconst Checkbox = {\n  Root,\n  Control,\n  Provider,\n  Group,\n  Label,\n}\n\nexport { Checkbox, useCheckbox }\nexport type { CheckboxProps }\n"
  }
}