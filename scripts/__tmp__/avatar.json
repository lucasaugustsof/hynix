{
  "name": "avatar",
  "dependencies": [],
  "registryDependencies": [],
  "file": {
    "name": "avatar.tsx",
    "content": "import type { Assign } from '@ark-ui/react'\nimport { Avatar as ArkAvatar, useAvatar } from '@ark-ui/react/avatar'\n\n\n\nimport { cn } from '<%= aliases.utilities %>/cn'\n\nimport { type VariantProps, tv } from '<%= aliases.utilities %>/tv'\n\n//---------------------------------\n// Variants\n//---------------------------------\n\nconst avatarVariantsSlots = tv({\n  slots: {\n    root: 'relative inline-flex aspect-square shrink-0 select-none overflow-hidden rounded-full border border-border',\n    fallback:\n      'absolute grid size-full place-items-center whitespace-nowrap bg-brand font-sans font-semibold text-fg-2',\n    image: 'pointer-events-none object-cover',\n  },\n  variants: {\n    size: {\n      xs: {\n        root: 'h-7',\n      },\n      sm: {\n        root: 'h-8',\n      },\n      md: {\n        root: 'h-10',\n        fallback: 'text-sm/5.5',\n      },\n      lg: {\n        root: 'h-11',\n        fallback: 'text-lg/7',\n      },\n      xl: {\n        root: 'h-14',\n        fallback: 'text-xl/8',\n      },\n      '2xl': {\n        root: 'h-18',\n        fallback: 'text-2xl/9.5',\n      },\n    },\n  },\n  compoundVariants: [\n    {\n      size: ['xs', 'sm'],\n      class: {\n        fallback: 'text-xs/4.5',\n      },\n    },\n  ],\n  defaultVariants: {\n    size: 'md',\n  },\n})\n\n//---------------------------------\n// Types\n//---------------------------------\n\ntype AvatarProps = Assign<\n  React.CustomComponentPropsWithRef<typeof ArkAvatar.Root>,\n  VariantProps<typeof avatarVariantsSlots>\n> & {\n  src: string\n  altText: string\n  fallback?: React.ReactNode\n}\n\n//---------------------------------\n// Avatar\n//---------------------------------\n\nfunction Avatar({\n  className,\n  size,\n  src,\n  altText,\n  fallback: renderFallback,\n  ...props\n}: AvatarProps) {\n  const { root, fallback, image } = avatarVariantsSlots({\n    size,\n  })\n\n  return (\n    <ArkAvatar.Root\n      {...props}\n      className={cn(\n        root({\n          className,\n        }),\n      )}\n    >\n      {renderFallback && (\n        <ArkAvatar.Fallback className={cn(fallback())}>\n          {renderFallback}\n        </ArkAvatar.Fallback>\n      )}\n\n      <ArkAvatar.Image className={cn(image())} src={src} alt={altText} />\n    </ArkAvatar.Root>\n  )\n}\n\nAvatar.displayName = 'Avatar'\n\n//---------------------------------\n// Utilities\n//---------------------------------\n\nfunction getInitialLetters(altText: string) {\n  return altText\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase())\n    .join('')\n}\n\n//---------------------------------\n// Exports\n//---------------------------------\n\nexport { Avatar, useAvatar, getInitialLetters }\nexport type { AvatarProps }\n"
  }
}