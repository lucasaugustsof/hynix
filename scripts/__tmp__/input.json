{
  "name": "input",
  "dependencies": [],
  "registryDependencies": [],
  "file": {
    "name": "input.tsx",
    "content": "import * as React from 'react'\n\nimport type { Assign } from '@ark-ui/react'\nimport { Field as ArkField } from '@ark-ui/react/field'\n\n\n\nimport { cn } from '<%= aliases.utilities %>/cn'\n\nimport { type VariantProps, tv } from '<%= aliases.utilities %>/tv'\n\n//---------------------------------\n// Variants\n//---------------------------------\n\nconst inputVariantsSlots = tv({\n  slots: {\n    root: [\n      'group inline-flex min-w-[15rem] overflow-hidden rounded-xl bg-surface-1 ring-1 ring-border',\n      'transition-[background-color,box-shadow] duration-150 ease-in-out',\n      // hover\n      'not-focus-within:has-enabled:hover:ring-2',\n      // focus\n      'focus-within:bg-surface-2 focus-within:ring-2 focus-within:ring-brand',\n      // disabled\n      'has-disabled:bg-fill-1 has-disabled:ring-0 has-disabled:*:cursor-not-allowed',\n    ],\n    input: [\n      'grow font-medium font-sans text-fg-1 tracking-normal caret-brand outline-none placeholder:select-none',\n      // disabled\n      'disabled:text-disabled disabled:placeholder:text-disabled',\n    ],\n    addon: [\n      'grid h-full shrink-0 place-items-center font-medium font-sans text-fill-5',\n      'data-[styling=true]:bg-fill-1 data-[styling=true]:text-fg-1/40',\n      // disabled\n      'group-has-disabled:text-disabled',\n    ],\n  },\n  variants: {\n    size: {\n      sm: {\n        root: 'h-9',\n        input: 'pr-2.5 pl-3 text-sm/5.5',\n        addon: ['text-sm/5.5 [&_svg]:size-5'],\n      },\n      md: {\n        root: 'h-11',\n        input: 'pr-3 pl-4 text-base',\n        addon: ['text-base [&_svg]:size-6'],\n      },\n      lg: {\n        root: [\n          'h-14',\n          // focus\n          'focus-within:ring-3',\n        ],\n        input: 'pr-4 pl-5 text-lg/7',\n        addon: [\n          'text-lg/7 [&_svg]:size-7',\n          'data-[part=prefix]:data-[styling=true]:pr-4 data-[part=prefix]:pl-4',\n          'data-[part=suffix]:data-[styling=true]:pl-4 data-[part=suffix]:pr-4',\n        ],\n      },\n    },\n    invalid: {\n      true: {\n        root: 'bg-surface-2 ring-2 ring-danger',\n      },\n    },\n  },\n  compoundVariants: [\n    {\n      size: ['sm', 'md'],\n      class: {\n        addon: [\n          'data-[part=prefix]:data-[styling=true]:pr-3 data-[part=prefix]:pl-3',\n          'data-[part=suffix]:data-[styling=true]:pl-3 data-[part=suffix]:pr-3',\n        ],\n      },\n    },\n  ],\n  defaultVariants: {\n    size: 'md',\n    isError: false,\n  },\n})\n\n//---------------------------------\n// Types\n//---------------------------------\n\ntype InputSharedProps = VariantProps<typeof inputVariantsSlots>\n\ntype InputProps = Assign<\n  Omit<React.CustomComponentPropsWithRef<typeof ArkField.Input>, 'prefix'>,\n  InputSharedProps\n> & {\n  prefix?: React.ReactNode\n  suffix?: React.ReactNode\n  prefixStyling?: boolean\n  suffixStyling?: boolean\n}\n\ntype AddonProps = Pick<\n  React.ComponentPropsWithRef<'label'>,\n  'children' | 'htmlFor'\n> & {\n  size: InputSharedProps['size']\n  type: 'prefix' | 'suffix'\n  styling?: boolean\n}\n\n//---------------------------------\n// InputAddon\n//---------------------------------\n\nfunction InputAddon({ size, type, styling = false, ...props }: AddonProps) {\n  const { addon } = inputVariantsSlots()\n\n  return (\n    <label\n      {...props}\n      role=\"presentation\"\n      className={cn(\n        addon({\n          size,\n        }),\n      )}\n      data-scope=\"input\"\n      data-part={type}\n      data-styling={styling}\n    />\n  )\n}\n\n//---------------------------------\n// Input\n//---------------------------------\n\nfunction Input({\n  className,\n  size,\n  invalid,\n  prefix,\n  suffix,\n  prefixStyling = false,\n  suffixStyling = false,\n  ...props\n}: InputProps) {\n  const uniqueId = React.useId()\n\n  const { root, input } = inputVariantsSlots({\n    size,\n  })\n\n  return (\n    <div\n      className={cn(\n        root({\n          className,\n          invalid,\n        }),\n      )}\n      data-scope=\"input\"\n      data-part=\"root\"\n    >\n      {prefix && (\n        <InputAddon\n          size={size}\n          type=\"prefix\"\n          styling={prefixStyling}\n          htmlFor={uniqueId}\n        >\n          {prefix}\n        </InputAddon>\n      )}\n\n      <ArkField.Input\n        {...props}\n        id={uniqueId}\n        className={cn(input())}\n        data-scope=\"input\"\n        data-part=\"input\"\n        aria-invalid={invalid}\n      />\n\n      {suffix && (\n        <InputAddon\n          size={size}\n          type=\"suffix\"\n          styling={suffixStyling}\n          htmlFor={uniqueId}\n        >\n          {suffix}\n        </InputAddon>\n      )}\n    </div>\n  )\n}\n\n//---------------------------------\n// Exports\n//---------------------------------\n\nexport { Input }\nexport type { InputProps }\n"
  }
}