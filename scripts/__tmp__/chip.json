{
  "name": "chip",
  "dependencies": [],
  "registryDependencies": [],
  "file": {
    "name": "chip.tsx",
    "content": "import * as React from 'react'\n\nimport type { Assign } from '@ark-ui/react'\n\n\n\nimport { cn } from '<%= aliases.utilities %>/cn'\n\nimport { recursiveClone } from '<%= aliases.utilities %>/recursive-clone'\n\nimport { type VariantProps, tv } from '<%= aliases.utilities %>/tv'\n\n\n\nimport { RiCloseLine } from '@remixicon/react'\n\n//---------------------------------\n// Constants\n//---------------------------------\n\nconst CHIP_PARTS = {\n  Root: 'Chip.Root',\n  Label: 'Chip.Label',\n  Close: 'Chip.Close',\n}\n\n//---------------------------------\n// Variants\n//---------------------------------\n\nconst chipVariantsWithSlots = tv({\n  slots: {\n    root: [\n      'group isolate inline-flex items-center justify-center whitespace-nowrap rounded-full border border-border bg-surface-2 shadow-black/8 shadow-xs dark:shadow-white/8',\n      'transition-colors ease-in-out-quad',\n    ],\n    label: 'font-medium font-sans text-fg-1',\n    close: [\n      'shrink-0 cursor-pointer transition-transform ease-in-out-quad [&_svg]:fill-fill-4',\n      'hover:scale-110 active:scale-95',\n    ],\n  },\n  variants: {\n    size: {\n      xs: {\n        root: 'h-7 gap-1 px-2.5',\n        label: 'text-xs/4.5',\n        close: '[&_svg]:size-4',\n      },\n      sm: {\n        root: 'h-8 gap-1.5 px-3',\n        label: 'text-sm/5.5',\n        close: '[&_svg]:size-5',\n      },\n      md: {\n        root: 'h-11',\n        label: 'text-base',\n        close: '[&_svg]:size-6',\n      },\n      lg: {\n        root: 'h-12',\n        label: 'text-lg/7',\n        close: '[&_svg]:size-7',\n      },\n    },\n    active: {\n      true: {\n        root: 'border-brand bg-brand',\n        label: 'text-fg-2',\n        close: '[&_svg]:fill-fg-2',\n      },\n      false: {\n        root: 'hover:bg-fill-1',\n        close: 'group-hover:[&_svg]:fill-fill-5',\n      },\n    },\n  },\n  compoundVariants: [\n    {\n      size: ['md', 'lg'],\n      class: {\n        root: 'gap-2 px-4',\n      },\n    },\n  ],\n  defaultVariants: {\n    size: 'sm',\n    active: false,\n  },\n})\n\nconst { root, label, close } = chipVariantsWithSlots()\n\n//---------------------------------\n// Types\n//---------------------------------\n\ntype ChipSharedProps = VariantProps<typeof chipVariantsWithSlots>\n\ntype ChipProps = Assign<React.ComponentPropsWithRef<'div'>, ChipSharedProps>\n\n//---------------------------------\n// Root\n//---------------------------------\n\nfunction Root({ children, className, size, active, ...props }: ChipProps) {\n  const keyPrefix = React.useId()\n\n  const extendedChildrenWithInjectedProps = recursiveClone<ChipSharedProps>(\n    children,\n    {\n      match: [CHIP_PARTS.Root, CHIP_PARTS.Label, CHIP_PARTS.Close],\n      inject: {\n        size,\n        active,\n      },\n      keyPrefix,\n    },\n  )\n\n  return (\n    <div\n      {...props}\n      className={cn(\n        root({\n          className,\n          size,\n          active,\n        }),\n      )}\n      data-scope=\"chip\"\n      data-part=\"root\"\n      data-focusable\n    >\n      {extendedChildrenWithInjectedProps}\n    </div>\n  )\n}\n\nRoot.displayName = CHIP_PARTS.Root\n\n//---------------------------------\n// Label\n//---------------------------------\n\nfunction Label({\n  className,\n  size,\n  active,\n  ...props\n}: Assign<React.ComponentPropsWithRef<'span'>, ChipSharedProps>) {\n  return (\n    <span\n      {...props}\n      className={cn(\n        label({\n          className,\n          size,\n          active,\n        }),\n      )}\n      data-scope=\"chip\"\n      data-part=\"label\"\n    />\n  )\n}\n\nLabel.displayName = CHIP_PARTS.Label\n\n//---------------------------------\n// Close\n//---------------------------------\n\nfunction Close({\n  className,\n  size,\n  active,\n  ...props\n}: Assign<React.ComponentPropsWithRef<'button'>, ChipSharedProps>) {\n  return (\n    <button\n      {...props}\n      type=\"button\"\n      className={cn(\n        close({\n          className,\n          size,\n          active,\n        }),\n      )}\n      data-scope=\"chip\"\n      data-part=\"close\"\n    >\n      <RiCloseLine className={cn('transition-colors ease-in-out-quad')} />\n    </button>\n  )\n}\n\nClose.displayName = CHIP_PARTS.Close\n\n//---------------------------------\n// Exports\n//---------------------------------\n\nexport const Chip = {\n  Root,\n  Label,\n  Close,\n}\nexport type { ChipProps }\n"
  }
}