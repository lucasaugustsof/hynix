{
  "name": "tabs-toggle",
  "dependencies": [],
  "registryDependencies": [],
  "file": {
    "name": "tabs-toggle.tsx",
    "content": "import * as React from 'react'\n\nimport type { Assign } from '@ark-ui/react'\nimport { Tabs as ArkTabs, useTabs, useTabsContext } from '@ark-ui/react/tabs'\n\nimport { AnimatePresence, motion } from 'motion/react'\n\n\n\nimport { cn } from '<%= aliases.utilities %>/cn'\n\nimport { recursiveClone } from '<%= aliases.utilities %>/recursive-clone'\n\nimport { type VariantProps, tv } from '<%= aliases.utilities %>/tv'\n\n//---------------------------------\n// Constants\n//---------------------------------\n\nconst TABS_TOGGLE_PARTS = {\n  Root: 'TabsToggle',\n  List: 'TabsToggleList',\n  Trigger: 'TabsToggleTrigger',\n  Content: 'TabsToggleContent',\n}\n\n//---------------------------------\n// Variants\n//---------------------------------\n\nconst tabsVariantsSlots = tv({\n  slots: {\n    root: null,\n    list: 'inline-flex gap-0.5 rounded-xl bg-fill-1 p-0.5',\n    trigger: 'group relative w-fit cursor-pointer outline-hidden',\n  },\n  variants: {\n    size: {\n      sm: {\n        list: 'h-8',\n        trigger: 'px-3 *:gap-2 *:text-sm/5.5 *:[&_svg]:size-5',\n      },\n      md: {\n        list: 'h-11',\n        trigger: 'px-4 *:gap-2.5 *:text-base *:[&_svg]:size-6',\n      },\n      lg: {\n        list: 'h-14',\n        trigger: 'px-5 *:gap-3 *:text-lg/7 *:[&_svg]:size-7',\n      },\n    },\n  },\n  defaultVariants: {\n    size: 'md',\n  },\n})\n\nconst { root, list, trigger } = tabsVariantsSlots()\n\n//---------------------------------\n// Types\n//---------------------------------\n\ntype TabsToggleSharedProps = VariantProps<typeof tabsVariantsSlots>\n\ntype TabsToggleProps = Assign<\n  React.CustomComponentPropsWithRef<typeof ArkTabs.Root>,\n  TabsToggleSharedProps\n>\n\n//---------------------------------\n// TabsToggle\n//---------------------------------\n\nfunction TabsToggle({ children, className, size, ...props }: TabsToggleProps) {\n  const keyPrefix = React.useId()\n\n  const extendedChildrenWithInjectedProps = recursiveClone(children, {\n    inject: {\n      size,\n    },\n    match: [TABS_TOGGLE_PARTS.List, TABS_TOGGLE_PARTS.Trigger],\n    keyPrefix,\n  })\n\n  return (\n    <ArkTabs.Root\n      {...props}\n      className={cn(\n        root({\n          className,\n        }),\n      )}\n      deselectable={false}\n    >\n      {extendedChildrenWithInjectedProps}\n    </ArkTabs.Root>\n  )\n}\n\nTabsToggle.displayName = TABS_TOGGLE_PARTS.Root\n\n//---------------------------------\n// TabsToggleList\n//---------------------------------\n\nfunction TabsToggleList({\n  className,\n  size,\n  ...props\n}: Assign<\n  React.CustomComponentPropsWithRef<typeof ArkTabs.List>,\n  TabsToggleSharedProps\n>) {\n  return (\n    <ArkTabs.List\n      {...props}\n      className={cn(\n        list({\n          className,\n          size,\n        }),\n      )}\n    />\n  )\n}\n\nTabsToggleList.displayName = TABS_TOGGLE_PARTS.List\n\n//---------------------------------\n// TabsToggleTrigger\n//---------------------------------\n\nfunction TabsToggleTrigger({\n  children,\n  className,\n  size,\n  ...props\n}: Assign<\n  React.ComponentPropsWithRef<typeof ArkTabs.Trigger>,\n  TabsToggleSharedProps\n>) {\n  const { value } = useTabsContext()\n  const isSelectedValue = props.value === value\n\n  return (\n    <ArkTabs.Trigger\n      {...props}\n      className={cn(\n        trigger({\n          className,\n          size,\n        }),\n      )}\n    >\n      <span\n        className={cn(\n          'relative z-10 inline-flex h-full select-none items-center whitespace-nowrap transition-colors duration-225 ease-out-circ',\n          'font-sans font-semibold text-fg-1/40 tracking-normal',\n          'group-data-selected:select-auto group-data-selected:text-fg-1 group-data-selected:[&_svg]:fill-fill-5',\n        )}\n      >\n        {children}\n      </span>\n\n      <AnimatePresence mode=\"popLayout\">\n        {isSelectedValue && (\n          <motion.span\n            layoutId=\"focused-value\"\n            className={cn(\n              'absolute inset-0 z-0 size-full place-items-center rounded-[calc(var(--radius-lg)_+_var(--radius-xs))] border border-border bg-surface-1 text-fg-1',\n              'shadow-black/6 shadow-xs dark:shadow-white/6',\n            )}\n            initial={false}\n            transition={{\n              layout: {\n                duration: 0.25,\n                ease: [0.215, 0.61, 0.355, 1],\n              },\n            }}\n          />\n        )}\n      </AnimatePresence>\n    </ArkTabs.Trigger>\n  )\n}\n\nTabsToggleTrigger.displayName = TABS_TOGGLE_PARTS.Trigger\n\n//---------------------------------\n// TabsToggleContent\n//---------------------------------\n\nconst TabsToggleContent = ArkTabs.Content\nTabsToggleContent.displayName = TABS_TOGGLE_PARTS.Content\n\n//---------------------------------\n// Exports\n//---------------------------------\n\nexport {\n  TabsToggle,\n  TabsToggleContent,\n  TabsToggleList,\n  TabsToggleTrigger,\n  useTabs,\n}\nexport type { TabsToggleProps }\n"
  }
}